/**
 * Properties for the DraggableWrapper component.
 * @typedef {Object} DraggableWrapperProps
 * @property {('parent'|string|{left?: number, top?: number, right?: number, bottom?: number})} [bounds] - Specifies movement boundaries for the draggable element.
 *   - `'parent'`: Restricts movement within the node's offsetParent (nearest node with position relative or absolute).
 *   - `string`: A CSS selector restricting movement within the targeted node (e.g., '#container', '.my-boundary').
 *   - `object`: An object with optional `left`, `top`, `right`, and `bottom` properties, indicating pixel offsets from the parent element's edges that the draggable element cannot cross.
 * @property {React.ReactNode} [children] - The content to be rendered inside the draggable element.
 * @property {string} [containerClassName] - Custom CSS class name(s) to apply to the outer container div of the Draggable component.
 * @property {boolean} [disabled=false] - If true, disables dragging functionality (both mouse/touch and keyboard).
 * @property {string} [handle] - A CSS selector for an element within the children that will act as the drag handle. If not specified, the entire draggable element is the handle.
 * @property {{x: number, y: number}} [initialPosition={x: 0, y: 0}] - The initial x and y coordinates for the draggable element. This is used only for the initial render. If `position` is provided, `initialPosition` is ignored.
 * @property {number} [initialPosition.x=0] - The initial horizontal position offset.
 * @property {number} [initialPosition.y=0] - The initial vertical position offset.
 * @property {boolean} [isBodyBounded=false] - If true, the draggable element is bounded by the `<body>` element, overriding the `bounds` prop.
 * @property {string} [keyboardInstructions=''] - Custom text announced by screen readers when keyboard dragging is initiated. Defaults provide basic instructions.
 * @property {(event: MouseEvent | TouchEvent | KeyboardEvent, data: DraggableData) => void | false} [onDrag] - Callback function invoked continuously while the element is being dragged.
 * @property {(event: MouseEvent | TouchEvent | KeyboardEvent, data: DraggableData) => void | false} [onStart] - Callback function invoked when dragging starts. Returning `false` cancels the drag operation.
 * @property {(event: MouseEvent | TouchEvent | KeyboardEvent, data: DraggableData) => void | false} [onStop] - Callback function invoked when dragging stops.
 * @property {{x: number, y: number}} [position] - Controls the position of the draggable element externally. If provided, the component becomes controlled, and its position is solely determined by this prop. `initialPosition` is ignored.
 * @property {number} [position.x] - The controlled horizontal position offset.
 * @property {number} [position.y] - The controlled vertical position offset.
 * @property {string} [wrapperClassName] - Custom CSS class name(s) to apply to the inner wrapper div generated by `react-draggable`.
 */
/**
 * Data passed to drag event handlers.
 * @typedef {Object} DraggableData
 * @property {HTMLElement} node - The DOM node being dragged.
 * @property {number} x - The current x-coordinate relative to the offset parent.
 * @property {number} y - The current y-coordinate relative to the offset parent.
 * @property {number} deltaX - The change in x-coordinate since the last drag event.
 * @property {number} deltaY - The change in y-coordinate since the last drag event.
 * @property {number} lastX - The x-coordinate at the previous drag event.
 * @property {number} lastY - The y-coordinate at the previous drag event.
 */
import React from "react";
/**
 * A wrapper component that makes its children draggable via mouse/touch and keyboard.
 * It enhances the `react-draggable` library with accessibility features and keyboard navigation.
 *
 * @component
 * @param {DraggableWrapperProps} props - The properties for the DraggableWrapper component.
 * @param {React.Ref<HTMLDivElement>} ref - Forwarded ref to the underlying draggable DOM element.
 * @returns {React.ReactElement} The rendered DraggableWrapper component.
 * @type {React.ForwardRefExoticComponent<DraggableWrapperProps & React.RefAttributes<HTMLDivElement>>}
 */
declare const DraggableWrapper: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
/**
 * @component DraggableWrapper
 * @storybook https://master--63a3f85277e81b426be0fdf8.chromatic.com/?path=/story/application-components-draggable--primary
 * @zeroHeight
 *
 * @description
 * An accessible wrapper component that enables mouse, touch, and keyboard dragging for its children.
 * It builds upon `react-draggable` by adding robust keyboard navigation (Space to activate, Arrows to move, Tab/Space to release)
 * and ARIA attributes for enhanced screen reader support. Includes boundary checking for controlled movement.
 *
 * @example
 * // Basic usage - Draggable anywhere
 * <DraggableWrapper>
 *   <div style={{ padding: '10px', border: '1px solid black', background: 'white' }}>Drag Me</div>
 * </DraggableWrapper>
 *
 * // With keyboard navigation, initial position, and parent bounds
 * <div style={{ height: '300px', width: '500px', border: '1px dashed grey', position: 'relative' }}>
 *   <DraggableWrapper
 *     bounds="parent"
 *     initialPosition={{ x: 50, y: 50 }}
 *     keyboardInstructions="Press Space to grab, use Arrows to move, Space/Tab to release."
 *   >
 *     <div style={{ padding: '10px', border: '1px solid blue', background: 'lightblue' }}>Drag Me (Keyboard OK)</div>
 *   </DraggableWrapper>
 * </div>
 *
 * // Controlled component
 * const [pos, setPos] = useState({ x: 10, y: 10 });
 * const handleDrag = (e: any, data: any): React.ReactElement => setPos({ x: data.x, y: data.y });
 * <DraggableWrapper position={pos} onDrag={handleDrag}>
 *   <div>Controlled Drag</div>
 * </DraggableWrapper>
 *
 * @keyboard
 * - **Focus the draggable element:** Use Tab key.
 * - **Activate Keyboard Dragging:** Press Spacebar while focused. Screen reader announces activation.
 * - **Move Element:** Use Arrow Keys (Up, Down, Left, Right) while keyboard dragging is active.
 * - **Deactivate Keyboard Dragging:** Press Spacebar or Tab key. Screen reader announces deactivation.
 *
 * @accessibility
 * - **Role:** Outer container uses `role="application"`, inner focusable element uses `role="button"`.
 * - **State:** `aria-grabbed` indicates whether the element is currently being dragged via keyboard.
 * - **Instructions:** `aria-describedby` links the draggable element to dynamically updated instructions (visible only to screen readers) in a separate `div` with `aria-live="polite"`.
 * - **Focus Management:** The inner `div` is focusable (`tabIndex={0}`).
 *
 * @updates
 * - Integrated `useKeyboardDrag` hook for keyboard navigation logic.
 * - Added comprehensive ARIA attributes (`role`, `aria-label`, `aria-describedby`, `aria-grabbed`, `aria-live`).
 * - Implemented dynamic screen reader instructions based on dragging state.
 * - Refined boundary calculations (`calculateBoundedPosition`).
 * - Improved state management for controlled (`position`) and uncontrolled (`initialPosition`) modes.
 * - Enhanced event handling to coordinate mouse/touch and keyboard dragging.
 * - Added `isBodyBounded` prop for simple body boundary constraint.
 * - Forwarded ref (`nodeRef`) correctly to `react-draggable`.
 *
 * @props
 * @prop {('parent'|string|{left?: number, top?: number, right?: number, bottom?: number})} [bounds] - Defines movement boundaries.
 * @prop {React.ReactNode} [children] - Content to make draggable.
 * @prop {string} [containerClassName] - CSS classes for the outer container.
 * @prop {boolean} [disabled=false] - Disables all dragging.
 * @prop {string} [handle] - CSS selector for the drag handle element.
 * @prop {{x: number, y: number}} [initialPosition={x: 0, y: 0}] - Starting position (uncontrolled).
 * @prop {boolean} [isBodyBounded=false] - If true, bounds to `<body>`, overrides `bounds`.
 * @prop {string} [keyboardInstructions=''] - Custom screen reader text for keyboard mode activation.
 * @prop {(event: MouseEvent | TouchEvent | KeyboardEvent, data: DraggableData) => void | false} [onDrag] - Callback during drag.
 * @prop {(event: MouseEvent | TouchEvent | KeyboardEvent, data: DraggableData) => void | false} [onStart] - Callback on drag start. Return `false` to cancel.
 * @prop {(event: MouseEvent | TouchEvent | KeyboardEvent, data: DraggableData) => void | false} [onStop] - Callback on drag end.
 * @prop {{x: number, y: number}} [position] - Controlled position. Overrides `initialPosition`.
 * @prop {string} [wrapperClassName] - CSS classes for the inner `react-draggable` element.
 *
 * @internals
 * - Uses `react-draggable` library for core mouse/touch drag functionality.
 * - Employs `useState` for managing internal position state (`controlledPosition`).
 * - Uses `useEffect` to sync with the controlled `position` prop.
 * - Leverages `useRef` for DOM node references (`dragContainerRef`, `nodeRef`).
 * - Custom hook `useKeyboardDrag` encapsulates keyboard interaction logic (state, event listeners, interval for continuous movement).
 * - Helper function `calculateBoundedPosition` enforces boundary constraints.
 * - Uses `twClassNames` utility for merging CSS classes.
 *
 * @end
 */
export default DraggableWrapper;
